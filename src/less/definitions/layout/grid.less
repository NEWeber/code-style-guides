////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Grid system
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Container widths
//
// Set the container width
.container {
    .container-fixed(@grid-gutter-width);
    @media( min-width: @screen-sm-min ) {
        .container-fixed(@grid-gutter-width-sm);
    }
    @media( min-width: @screen-md-min ) {
        .container-fixed(@grid-gutter-width-md);
    }
}

// Fluid container
//
// Utilizes the mixin meant for fixed width containers, but without any defined
// width for fluid, full width layouts.
.container-fluid{
    .container-fluid();
    @media( min-width: @screen-sm-min ) {
        .container-fluid(@grid-gutter-width-sm);
    }
    @media( min-width: @screen-md-min ) {
        .container-fluid(@grid-gutter-width-md);
    }
}

// Columns
//
// Common styles for small and large grid columns
.make-grid-columns();

// Breakpoint-specific padding
[class^=col-],
[class*=col-] {
    position: relative;
    width: 100%;
    display: inline-block;

    @media( min-width: @screen-sm-min ) {
        padding-left: @grid-gutter-width-sm / 2;
        padding-right: @grid-gutter-width-sm / 2;
    }
    @media( min-width: @screen-md-min ) {
        padding-left: @grid-gutter-width-md / 2;
        padding-right: @grid-gutter-width-md / 2;
    }
}

// Row
//
// Rows contain and clear the floats of floated columns or naturally wrap flex displays.
.row {
    .make-row();

    // Floated -- Default
    &:not( &-flex ) {
        &:extend( .clearfix all );

        & > [class^=col-],
        & > [class*=col-] {
            float: left;
        }
    }

    // Flex
    &&-flex {
        align-items: flex-start;
        display: flex;
        flex-flow: row wrap;

        &.fixed {
            align-items: stretch;
        }

        &.tile {
            & > [class*=col-],
            & > [class^=col-] {
                padding: 0;
            }

            &.masonry {
                padding: 0;
                min-width: 100%;
                margin: 0 auto;
            }

            & > [class*=col-],
            & > [class^=col-] {

                & > .card {
                    margin: 0;
                    border-radius: 0;
                }
            }
        }

        &.overflow {
            overflow: auto;
            flex-wrap: nowrap;
            align-items: center;

            scroll-behavior: smooth;
            -webkit-overflow-scrolling: touch;

            cursor: pointer;

            padding-right: 25%;

            /* Scroll-snapping */
            scroll-snap-type: mandatory;
            scroll-snap-align: left;

            /* Older spec implementation  -- Remove when polyfill updated */
            scroll-snap-destination: 0% 75%;
            scroll-snap-points-x: repeat( 100% );

            &.tile,
            &.fixed {
                align-items: stretch
            }
        }

        & > [class^=col-],
        & > [class*=col-] {
            display: inline-flex;
            flex-flow: column nowrap;
            float: none;
        }
    }
}

// Extra small grid
//
// Columns, offsets, pushes, and pulls for extra small devices like
// smartphones.
.make-grid(xs);

// Small grid
//
// Columns, offsets, pushes, and pulls for the small device range, from phones
// to tablets.
@media (min-width: @screen-sm-min) {
    .make-grid(sm);
}

// Medium grid
//
// Columns, offsets, pushes, and pulls for the desktop device range.
@media (min-width: @screen-md-min) {
    .make-grid(md);
}

// Large grid
//
// Columns, offsets, pushes, and pulls for the large desktop device range.
@media (min-width: @screen-lg-min) {
    .make-grid(lg);
}
